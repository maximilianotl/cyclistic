--Creat una base de datos

CREATE DATABASE portfolio_projects;

--Seleccionar la base de datos

USE portfolio_projects;

--Permitir el acceso para crear nuevas tablas

GRANT ALL ON portfolio_projects.* TO 'root'@'localhost';

--Para crear una nueva tabla

CREATE TABLE cyclistic (
ride_id VARCHAR (20),
rideable_type VARCHAR (15),
started_at DATETIME,
ended_at DATETIME,
start_station_name VARCHAR (100),
start_station_id VARCHAR (50),
end_station_name VARCHAR (100),
end_station_id VARCHAR (50),
start_lat VARCHAR (20),
start_lng VARCHAR (20),
end_lat VARCHAR (20),
end_lng VARCHAR (20),
member_casual VARCHAR(10) );

--Para visualizar los atributos de la tabla

DESCRIBE cyclistic;

-Habilitar la importación de datos locales
https://www.youtube.com/watch?v=IOYNsyVUdew
SHOW GLOBAL VARIABLES LIKE 'local_infile';
SET GLOBAL local_infile='ON';
SHOW VARIABLES LIKE 'secure_file_priv';
SET GLOBAL sql_mode= 'NO_ENGINE_SUBSTITUTION';

-- Modificar la tabla
ALTER TABLE cyclistic
MODIFY member_casual VARCHAR (20);
MODIFY start_lat VARCHAR (20),
MODIFY start_lng VARCHAR (20),
MODIFY end_lat VARCHAR (20),
MODIFY end_lng VARCHAR (20),
MODIFY start_station_id VARCHAR (50),
MODIFY end_station_id VARCHAR (50);

--Para importar un archivo csv

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202201-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202202-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202203-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202204-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202205-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202206-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202207-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202208-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

\* Convertir el formato del archivo .csv para dejarlo sin comillas y concatenando fechas*/
--Concatenar fechas en Excel

=+CONCATENAR(A2,",",B2,",",(+TEXTO(C2,"aaaa-mm-dd hh:mm:ss")),",",(+TEXTO(D2,"aaaa-mm-dd hh:mm:ss")),",",E2,",",F2,",",G2,",",H2,",",I2,",",J2,",",K2,",",L2,",",M2)

--Guardar los datos sin comillas
https://es.extendoffice.com/documents/excel/3620-excel-save-worksheet-data-as-csv-file-with-without-double-quotes.html
alt+f11
Insertar > Módulo

Sub Export()
'updateby Extendoffice
    Dim xRg As Range
    Dim xRow As Range
    Dim xCell As Range
    Dim xStr As String
    Dim xTxt As String
    Dim xName As Variant
    On Error Resume Next
    If ActiveWindow.RangeSelection.Count > 1 Then
      xTxt = ActiveWindow.RangeSelection.AddressLocal
    Else
      xTxt = ActiveSheet.UsedRange.AddressLocal
    End If
    Set xRg = Application.InputBox("Please select data range:", "Kutools for Excel", xTxt, , , , , 8)
    If xRg Is Nothing Then Exit Sub
    xName = Application.GetSaveAsFilename("", "CSV File (*.csv), *.csv")
    Open xName For Output As #1
    For Each xRow In xRg.Rows
        xStr = ""
        For Each xCell In xRow.Cells
            xStr = xStr & xCell.Value & Chr(9)
        Next
        While Right(xStr, 1) = Chr(9)
            xStr = Left(xStr, Len(xStr) - 1)
        Wend
        Print #1, xStr
    Next
    Close #1
    If Err = 0 Then MsgBox "The file has saved to: " & xName, vbInformation, "Kutools for Excel"
End Sub


LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202209-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202210-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202211-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:\\Users\\Maximiliano\\Documents\\MAXIMILIANO\\DATA ANALYST\\Curso 8\\DIVVY\\divvy_trip_data_2022_sql//202212-divvy-tripdata.csv'
INTO TABLE cyclistic
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

##LIMPIAR DATOS
#Parsing: locates and identifies individual data elements in the source files and then isolates these data elements in the target files.

--La tabla base es rideable_type, started_at, ended_at, start_station_name, end_station_name, member_casual, ride_length, day, month, year
--Hay un total de 5,667,717 eventos.
--Habían 61 eventos que terminaron después del año 2022. Debido a que 61 eventos no son para nada una cantidad significativa en los datos, se elimiraron.
--Nombres de estaciones son nulas, deben ser cambiados por 'Unkown' para facilitar los cálculos.
--Las columnas útiles son rideable_type, started_at, ended_at, start_station_name, end_station_name, member_casual
#Correcting: corrects parsed individual data components using sophisticated data algorithms and secondary data sources.
--Eliminar eventos en el 2023
DELETE FROM cyclistic
WHERE ended_at LIKE '2023%';

--Eliminar eventos que tienen la fecha de final menor que la fecha de inicio del viaje
DELETE
FROM cyclistic
WHERE TIMEDIFF(ended_at, started_at)<0;

Representan 100 viajes, lo cual, no es significativo para la cantidad de viajes que existen.

#Standarization: applies conversion routines to transform data into its preferred (and consistent) format using both standard and custom business rules.

#Matching: searching and matching records within and across the parsed, corrected and standardized data based on predefined business rules to eliminate duplications.

#Consolidating: analyzing and identifying relationships between matched records and consolidating/merging them into one representation.
--La tabla base con la que haré los cálculos

#N_tile
--Antes de correr el siguiente query, es necesario correr esta línea porque la fórmula de la mediana lo requiere. 
SET @rowindex := -1;

(SELECT 'n_tile', 'lower_bound', 'upper_bound', 'member_casual', 'rideable_type', 'rides', 'mean', 'mean_all', 'mode', 'median')
UNION
(SELECT n_tile, MIN(ride_length) AS lower_bound, MAX(ride_length) AS upper_bound, member_casual, rideable_type, COUNT(ride_length) AS count_rides,
SEC_TO_TIME(AVG(TIME_TO_SEC(ride_length))) AS mean,
(SELECT SEC_TO_TIME(AVG(TIME_TO_SEC(ride_length))) FROM 
(
SELECT *, TIMEDIFF(ended_at, started_at) AS ride_length
FROM cyclistic
)h) AS mean_all,
(
SELECT
    ride_length as mode_length
FROM
    (
        SELECT
            ride_length,
            count,
            DENSE_RANK() OVER(
                ORDER BY
                    count DESC
            ) as rnk
        FROM
            (
                SELECT
                    ride_length,
                    COUNT(*) AS count
                FROM
                    (
SELECT *, TIMEDIFF(ended_at, started_at) AS ride_length
FROM cyclistic
)aaaa
                GROUP By
                    ride_length
            ) x
    ) y
WHERE
    rnk = 1
) AS mode,
(SELECT
   SEC_TO_TIME(AVG(TIME_TO_SEC(g.grade))) AS median
FROM
   (SELECT @rowindex:=@rowindex + 1 AS rowindex,
           aaa.ride_length AS grade
    FROM 
(
SELECT *, TIMEDIFF(ended_at, started_at) AS ride_length
FROM cyclistic
)aaa
    ORDER BY aaa.ride_length) AS g
WHERE
g.rowindex IN (FLOOR(@rowindex / 2) , CEIL(@rowindex / 2))
) AS median
FROM(SELECT NTILE(12) OVER (ORDER BY ride_length) AS n_tile, member_casual, rideable_type, ride_length
FROM 
(
SELECT member_casual,rideable_type, TIMEDIFF(ended_at, started_at) AS ride_length
FROM cyclistic
)a
)aa
GROUP BY 1,4,5)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\data_tile.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


(SELECT 'n_tile', 'lower_bound', 'upper_bound', 'member_casual', 'rideable_type', 'rides', 'ride_length')
UNION
(SELECT n_tile, MIN(ride_length) AS lower_bound, MAX(ride_length) AS upper_bound, member_casual, rideable_type, COUNT(ride_length) AS count_rides, ride_length
FROM(SELECT NTILE(12) OVER (ORDER BY ride_length) AS n_tile, member_casual, rideable_type, ride_length
FROM 
(
SELECT member_casual,rideable_type, TIMEDIFF(ended_at, started_at) AS ride_length
FROM cyclistic
)a
)aa
GROUP BY 1,4,5,7)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\data_ti.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

#Estaciones
https://platzi.com/blog/calcula-distancias-con-mysql/
https://gist.github.com/pedrokoblitz/3757634
https://www.deformasymapas.com/blog/post/2/

--Para la distancia es necesario convertir las longitudes y latitudes a radianes, por eso la presencia de PI()
--La unión de w y f se dan por medio de una unión lateral. El requisito para usarlas es una coma después de la tabla a unir y la palabra lateral, seguido de la segunda tabla. Este tipo de uniones permite usar los resultados de la tabla anterior, y las condiciones se dan en la cláusula where y no en on, como en un join.
(SELECT 'user', 'rideable_type', 'start_station_name', 'start_lng', 'start_lat', 'top_start_stations', 's_rides', 'end_station_name', 'end_lng', 'end_lat', 'top_end_stations', 'e_rides', 'min_ride_length', 'max_ride_length', 'average_ride', 'distance_km')
UNION
(
SELECT f.member_casual, f.rideable_type, f.start_station_name, f.start_lng, f.start_lat, f.top_start_stations, f.s_rides, f.end_station_name, f.end_lng, f.end_lat, f.top_end_stations, f.rides, MIN(g.rlength) AS min_ride_length, MAX(g.rlength) AS max_ride_length, SEC_TO_TIME(AVG(TIME_TO_SEC(g.rlength))) AS average_ride, f.distance_km
FROM
(
SELECT w.member_casual, w.rideable_type, w.start_station_name, w.start_lng, w.start_lat, w.top_start_stations, e.end_station_name, e.end_lng, e.end_lat, e.top_end_stations, e.e_rides AS rides,  ROUND(((111.18)*(ACOS((SIN(w.start_lat*PI()/180)*SIN(e.end_lat*PI()/180))+(COS(w.start_lat*PI()/180)*COS(e.end_lat*PI()/180)*COS((e.end_lng-w.start_lng)*PI()/180)))*180/PI())),2) AS distance_km, w.s_rides
FROM
(
SELECT *
FROM
(
SELECT member_casual, rideable_type, start_station_name, start_lng, start_lat, s_rides, RANK() OVER(PARTITION BY member_casual,rideable_type ORDER BY s_rides DESC) AS top_start_stations
FROM 
(
SELECT member_casual, rideable_type, start_station_name, start_lng, start_lat, COUNT(*) AS s_rides
FROM cyclistic
GROUP BY 1,2,3,4,5
)a
GROUP BY 1,2,3,4,5,6
)aa
WHERE  top_start_stations IN (1,2,3,4,5)
) AS w,
LATERAL
(
SELECT *
FROM
(
SELECT *, RANK() OVER(PARTITION BY w.member_casual, w.rideable_type, w.top_start_stations ORDER BY a.e_rides DESC) AS top_end_stations
FROM 
(
SELECT end_station_name, end_lng, end_lat, COUNT(*) AS e_rides
FROM cyclistic AS c
WHERE w.member_casual=c.member_casual
AND w.rideable_type=c.rideable_type
AND w.start_station_name = c.start_station_name
AND w.start_lng=c.start_lng
AND  w.start_lat=c.start_lat
GROUP BY 1,2,3
) AS a
GROUP BY 1,2,3,4
) AS aa
WHERE  top_end_stations IN (1,2,3)
) AS e
GROUP BY 1,2,3,4,5,7,8,9,11
) AS f
INNER JOIN
(
SELECT *, TIMEDIFF(ended_at, started_at) AS rlength
FROM cyclistic
) AS g
ON f.member_casual=g.member_casual
AND f.rideable_type=g.rideable_type
AND f.start_station_name =g.start_station_name
AND f.start_lng=g.start_lng
AND  f.start_lat=g.start_lat
AND f.end_station_name=g.end_station_name
AND f.end_lng=g.end_lng
AND f.end_lat=g.end_lat
GROUP BY 1,2,3,4,5,7,8,9,10,12)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\stations.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


--Este código se utiliza para cambiar todos los valores de una columna. Se extraen seis dígitos del string.
UPDATE cyclistic SET member_casual=SUBSTRING(member_casual, 1, 6);


#Time series
##Simple trende
###Month
--Substring no es necesario en el código, se usó por un problema en la columna member_Casual
(SELECT 'user', 'rideable_type', 'month', 'rides')
UNION
(
SELECT SUBSTRING(member_casual, 1, 6), rideable_type, MONTHNAME(started_at) AS month, COUNT(*) AS rides
FROM cyclistic
GROUP BY 1,2,3
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\month.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

###Week

(SELECT 'user', 'rideable_type', 'week', 'rides')
UNION
(
SELECT member_casual, rideable_type, WEEK(started_at) AS week, COUNT(*) AS rides
FROM cyclistic
GROUP BY 1,2,3
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\week.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

###Dayname
(SELECT 'user', 'rideable_type', 'day', 'rides')
UNION
(
SELECT member_casual, rideable_type, DAYNAME(started_at) AS day, COUNT(*) AS rides
FROM cyclistic
GROUP BY 1,2,3
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\day.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

###Hour
(SELECT 'user', 'rideable_type', 'hour', 'rides')
UNION
(
SELECT member_casual, rideable_type, HOUR(started_at) AS hour, COUNT(*) AS rides
FROM cyclistic
GROUP BY 1,2,3
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\hour.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


###Ratios

(SELECT 'month', 'casual', 'member', 'member_minus_casual', 'member_times_of_casual','member_pct_of_casual')
UNION
(
SELECT month, casual, member, (member-casual) AS member_minus_casual, (member/casual) AS member_times_of_casual, ((member/casual-1)*100) AS member_pct_of_casual
FROM
(
SELECT month
,SUM(CASE WHEN user='casual' THEN rides END) AS casual
,SUM(CASE WHEN user='member' THEN rides END) AS member
FROM
(
SELECT MONTHNAME(started_at) AS month, COUNT(*) AS rides, SUBSTRING(member_casual, 1, 6) AS user
FROM cyclistic
GROUP BY 1,3
)a
GROUP BY 1
)aa
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\comparison.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


#Percentages
##Porcentaje mensual por usuarios
WITH ma AS
(
SELECT MONTHNAME(started_at) AS month, COUNT(*) AS rides, member_casual AS user
FROM cyclistic
GROUP BY 1,3
)
select p.month, p.user, p.total_rides, ((p.rides*100)/p.total_rides) as pct_total_rides
from 
(
select m.month, m.user, m.rides, sum(m.rides) over(partition by m.month) as total_rides 
from ma as m
join ma as a
on m.month=a.month
and m.user!=a.user
) as p;


--Este es un código más breve que el anterior
select month, user, ((rides*100)/total_rides) as pct_total_rides
from
(
select month, user, rides, sum(a.rides) over(partition by month) as total_rides
from
(
SELECT MONTHNAME(started_at) AS month, COUNT(*) AS rides, member_casual AS user
FROM cyclistic
GROUP BY 1,3
) as a
) as b;

##Porcentaje anual por usuarios por mes

select month, user, ((rides*100)/sum(rides) over(partition by year)) as pct_yearly
from
(
SELECT MONTHNAME(started_at) AS month, member_casual AS user, YEAR(started_at) as year, COUNT(*) as rides
from cyclistic
GROUP BY 1,2,3
) as a;



##Indexing to see percent change over time
--En order by clause hay un artificio para poder ordenar por nombre del mes (https://www.w3schools.com/sql/func_mysql_str_to_date.asp)
-Se utilizan dos extracciones del mes, una del nombre y otra del número. La del número se usa en window function para poder ordenarlo adecuadamente.
select month, rides, (rides/first_value(rides) over(order by mon)-1)*100 as pct_from_index
from
(
SELECT MONTH(started_at) AS mon, MONTHNAME(started_at) AS month, COUNT(*) as rides
from cyclistic
GROUP BY 1,2
) as a
ORDER BY str_to_date(MONTH,'%M');

select month, user, rides, (rides/first_value(rides) over(partition by user order by mon)-1)*100 as pct_from_index
from
(
SELECT MONTH(started_at) AS mon, MONTHNAME(started_at) AS month, member_casual as user, COUNT(*) as rides
from cyclistic
GROUP BY 1,2,3
) as a
ORDER BY str_to_date(MONTH,'%M');

--Código combinado para obtener porcentaje anual y mensual, y porcentaje indexado
(select 'month', 'user', 'rides', 'pct_total_rides', 'pct_yearly', 'pct_from_index')
union
(
select month, user, rides, ((rides*100)/sum(rides) over(partition by month)) as pct_total_rides, ((rides*100)/sum(rides) over(partition by year)) as pct_yearly, (rides/first_value(rides) over(partition by user order by mon)-1)*100 as pct_from_index
from
(
SELECT MONTHNAME(started_at) AS month, MONTH(started_at) AS mon, member_casual AS user, YEAR(started_at) as year, COUNT(*) as rides
from cyclistic
GROUP BY 1,2,3,4
) as a
ORDER BY str_to_date(MONTH,'%M')
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\percentages.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


##Moving average
###Week
(select 'week', 'moving_avg', 'records_count')
union
(
SELECT week, avg(rides) over(order by week rows between 52 preceding and current row) as moving_avg, count(rides) over(order by week rows between 52 preceding and current row) as records_count
from (
SELECT week(started_at) AS week, COUNT(*) as rides
from cyclistic
GROUP BY 1
) as a
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\movavgweek.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

###Month
(select 'month', 'moving_avg', 'records_count')
union
(
SELECT month, avg(rides) over(order by mon rows between 11 preceding and current row) as moving_avg, count(rides) over(order by mon rows between 11 preceding and current row) as records_count
from (
SELECT MONTHNAME(started_at) AS month, MONTH(started_at) AS mon, COUNT(*) as rides
from cyclistic
GROUP BY 1,2
) as a
ORDER BY str_to_date(MONTH,'%M')
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\movavgmonth.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

##Cumulative values
(select 'week', 'rides', 'month_rides')
union
(
select week, rides, sum(rides) over(partition by mon order by week) as month_rides
from (
SELECT MONTH(started_at) AS mon, week(started_at) AS week, COUNT(*) as rides
from cyclistic
GROUP BY 1,2
) as a
ORDER BY 1
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\cumval.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


##MoM
(select 'user', 'month', 'rides', 'pct_growth_from_previous')
union
(
select user, month, rides, (rides/lag(rides) over(partition by user order by mon)-1)*100 as pct_growth_from_previous
from (
SELECT MONTHNAME(started_at) AS month, MONTH(started_at) AS mon, member_casual as user, COUNT(*) as rides
from cyclistic
GROUP BY 1,2,3
) as a
ORDER BY str_to_date(MONTH,'%M')
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\mom.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


##WoW
(select 'user', 'week', 'rides', 'pct_growth_from_previous')
union
(
select user, week, rides, (rides/lag(rides) over(partition by user order by week)-1)*100 as pct_growth_from_previous
from (
SELECT  week(started_at) AS week, member_casual as user, COUNT(*) as rides
from cyclistic
GROUP BY 1,2
) as a
ORDER BY 2
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\wow.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

(select 'user', 'number_day', 'day','rides_1','rides_2','rides_3','rides_4','rides_5','rides_6','rides_7','rides_8','rides_9','rides_10','rides_11','rides_12')
union
(
select user, number_day, day, max(case when mon=1 then rides end) as rides_1, max(case when mon=2 then rides end) as rides_2,max(case when mon=3 then rides end) as rides_3,max(case when mon=4 then rides end) as rides_4,max(case when mon=5 then rides end) as rides_5,max(case when mon=6 then rides end) as rides_6,max(case when mon=7 then rides end) as rides_7,max(case when mon=8 then rides end) as rides_8,max(case when mon=9 then rides end) as rides_9,max(case when mon=10 then rides end) as rides_10,max(case when mon=11 then rides end) as rides_11,max(case when mon=12 then rides end) as rides_12
from (
SELECT  dayname(started_at) AS day, dayofweek(started_at) as number_day, MONTH(started_at) AS mon, member_casual as user, COUNT(*) as rides
from cyclistic
GROUP BY 1,2,3,4
) as a
group by 1,2,3
order by 1,2
)
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\portfolio_projects\\daysbymonth.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';


